#ifdef CORE_CM7
#include <Arduino.h>
#include <RPC.h>
#include <RPC_client.h>
#include "LF_SData.h"
#include "MotorDriver.h"

// Pins
#define S0 D0
#define S1 D1
#define S2 D2
#define S3 D3
#define SIG A6

#define M1DIR D4
#define M1PWM D5
#define M2DIR D7
#define M2PWM D6

// PID variables (updated at runtime via RPC)
float KP = 0.22;
float KI = 0.008;
float KD = 9.2;
float setBaseSpeed = 50;
int setMaxSpeed = 70;

LF_SData sensorData;
MotorDriver motors(M1DIR, M1PWM, M2DIR, M2PWM);

// Timing variables
float previousError = 0;
float integral = 0;
unsigned long startTime = 0;
unsigned long accelerationTime = 500;

extern "C" void bootM4();

void setup() {
  Serial.begin(115200);
  while (!Serial);
  RPC.begin();               // Initialize RPC and boot M4 core
  bootM4();
  Serial.println("M7: M4 booted");

  sensorData.setupLineSensors(S0, S1, S2, S3, SIG);
  sensorData.calibrateSensors(false);
}

void loop() {
  // Fetch updated constants from M4
  KP = RPC.call("getKP").as<float>();
  KI = RPC.call("getKI").as<float>();
  KD = RPC.call("getKD").as<float>();
  setBaseSpeed = RPC.call("getBase").as<float>();
  setMaxSpeed = RPC.call("getMax").as<int>();

  // Acceleration ramp
  if (startTime == 0) startTime = millis();
  unsigned long elapsed = millis() - startTime;
  float baseSpeed = setBaseSpeed;
  int maxSpeed = setMaxSpeed;
  if (elapsed <= accelerationTime) {
    baseSpeed = map(elapsed, 0, accelerationTime, 0, setBaseSpeed);
    maxSpeed  = map(elapsed, 0, accelerationTime, 0, setMaxSpeed);
  }

  // Read line and compute error
  long linePos = sensorData.getLinePosition();
  float error = linePos - 7500;
  integral += error;
  float derivative = error - previousError;
  previousError = error;

  float correction = KP * error + KI * integral + KD * derivative;
  int leftSpeed  = constrain(baseSpeed - correction, 0, maxSpeed);
  int rightSpeed = constrain(baseSpeed + correction, 0, maxSpeed);

  // Corner handling
  if (linePos <= 2500) {
    leftSpeed  = 31;
    rightSpeed = -27;
  } else if (linePos >= 12500) {
    leftSpeed  = -27;
    rightSpeed = 31;
  }

  motors.setMotor1Speed(leftSpeed);
  motors.setMotor2Speed(rightSpeed);

  delay(5);
}
#endif

#ifdef CORE_CM4
#include <Arduino.h>
#include <RPC.h>
#include "WebServerHandler.h"
#include <WiFi.h>
#include "arduino_secrets.h"

#define CALIBRATION_FLAG false
#define DEBUG_FLAG false
#define SETUP_WIFI false

// PID parameters stored here
float KP = 0.22;
float KI = 0.008;
float KD = 9.2;
float setBaseSpeed = 50;
int setMaxSpeed = 70;

WiFiServer server(80);

// RPC getters
float getKP()       { return KP; }
float getKI()       { return KI; }
float getKD()       { return KD; }
float getBase()     { return setBaseSpeed; }
int   getMax()      { return setMaxSpeed; }

void setup() {
  Serial.begin(115200);
  while (!Serial);
  RPC.begin();
  // Bind RPC calls to retrieve current constants
  RPC.bind("getKP", getKP);
  RPC.bind("getKI", getKI);
  RPC.bind("getKD", getKD);
  RPC.bind("getBase", getBase);
  RPC.bind("getMax", getMax);

  // Start Wi-Fi Access Point
  if (WiFi.beginAP(SECRET_SSID, SECRET_PASS) != WL_AP_LISTENING) {
    Serial.println("M4: Failed to start AP");
    while (true);
  }
  Serial.println("M4: AP started");
  Serial.print("IP: "); Serial.println(WiFi.localIP());

  server.begin();
}

void loop() {
  // Handle web requests to update constants
  handleWeb();
  // Allow RPC to process any incoming requests
  RPC.process();
}
#endif
